ReactJS Notes
  SPA - single page application
  MPA - multiple page application
    Don't add more index.html files.
    Use multiple create-react-app's

  linting - notifies you if you are writing sub-optimal code

  Webpack as bundler (standard these days)
  Babel compiles es6 ti es5

  npm install -g create-react-app
  create-react-app my-app --scripts-version 1.1.5
  create-react-app [appName]
    bootstraps react project.
    https://github.com/facebook/create-react-app

  npm start
    runs the react server
  npm build
    builds the react app.
    Adds everything into one file (js?)

  File Structure
    index.html
      only html file you should add.
      Add more html using the jsx in the render methods of js
    manifest.json
      defines meta-data about application
    src/
      Where all the source files for the application are
    App.js
      Is the first component in the project
      Components are usually classes.
    File extensions can end with .jsx

  Components
    Typical react project could be depicted as a component tree.

    A component is just a function that returns some jsx
    All components need 'react' import.
    imports begin with capital character.
    <Component />
      Use self closing tags when using the imported components.


    render()
      Creates html to render to the dom
      html in this method is jsx
      This 'html' is syntactical sugar.
        React.createElement('ele', arg, children)
          Takes 3 arguments.
          Created with the syntactical sugar.
      use className instead of class.
        class is a reserved name in javascript
      jsx must have one root element.

    Functional Components
      rfc - vscode shortcut
      "presentational", "dumb" or "stateless" components
      Is basically a function that returns jsx. Does not have anything else going on with it.

    Class-based Components
      "containers", "smart" or "stateful" components


    Dynamic content
      <h1>Random number is {Math.floor(Math.random() * 30)} !</h1>
        can be outputted in the string
        inline expression
        can call functions that way

      Props
        Properties (short for) - are attributes you add onto a component.
        {props}
          Using functional components
        {this.props}
          When using classed based components

      Children
        Refers to any element between the opening and closing tag of the components.
          instead of: <Person/>
          its this: <Person>I am children</Person>


    State
      Only available in class based components
      Using class based components and state this way is the default way of managing state

      having state in all your components will make the application unpredictable the larger it grows.
        Other components can change other components state
      state is a reserved word
      state = {}
        is an object

      If state changes, it will cause React to rerender the dom.
      Props also cause the DOM to rerender

      Event handling
        Methods should have the name suffix 'handler' because you are not directly calling it
        https://reactjs.org/docs/events.html#supported-events - Support react events. (SyntheticEvent)

        Don't mutate state directly
        use setState() to change state
          Merges with existing state

      Hooks
        Only work with functional components
        (React 16.8+)

        useEffect()

        useState()
          hook that allows you to manage state in a functional component
          returns a array with exactly 2 elements and always 2 elements
            1st ele = current state
            2nd ele = function that allows you to update state
          Can use array destructuring to get the elements of the useState method
          Does not merge, it replaces the old state.

        Can create custom hooks

      Stateful components - are components that manage state. (app.js in this example)
        Smart components
        Container components
        If every component is managing state you end up with spaghetti code.
        Makes it very hard to do anything, also makes the app unpredictable
      Stateless components - are components that do not manage state. (Person component)
        Or also called presentational components
        stateless, or dumb components

      Have as many stateless, presentational components as possible.
      Use stateful components when you need to manage state.

      Bind sytax is more efficient
      47