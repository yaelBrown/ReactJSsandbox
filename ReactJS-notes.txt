ReactJS Notes
  SPA - single page application
  MPA - multiple page application
    Don't add more index.html files.
    Use multiple create-react-app's

  linting - notifies you if you are writing sub-optimal code

  Webpack as bundler (standard these days)
  Babel compiles es6 ti es5

  npm install -g create-react-app
  create-react-app my-app --scripts-version 1.1.5
  create-react-app [appName]
    bootstraps react project.
    https://github.com/facebook/create-react-app

  npm start
    runs the react server
  npm build
    builds the react app.
    Adds everything into one file (js?)

  File Structure
    index.html
      only html file you should add.
      Add more html using the jsx in the render methods of js
    manifest.json
      defines meta-data about application
    src/
      Where all the source files for the application are
    App.js
      Is the first component in the project
      Components are usually classes.
    File extensions can end with .jsx

  Components
    Typical react project could be depicted as a component tree.

    A component is just a function that returns some jsx
    All components need 'react' import.
    imports begin with capital character.
    <Component />
      Use self closing tags when using the imported components.


    render()
      Creates html to render to the dom
      html in this method is jsx
      This 'html' is syntactical sugar.
        React.createElement('ele', arg, children)
          Takes 3 arguments.
          Created with the syntactical sugar.
      use className instead of class.
        class is a reserved name in javascript
      jsx must have one root element.

    Functional Components
      rfc - vscode shortcut
      "presentational", "dumb" or "stateless" components
      Is basically a function that returns jsx. Does not have anything else going on with it.
      access to state (useState())
      Does not support Lifecycle hooks
      Use when you dont want to manage state, or have access to lifecycle hooks.

    Class-based Components
      "containers", "smart" or "stateful" components
      Use if you need to manage state or access to Lifecycle hooks and don't want to use React Hooks
      extends ComponentAccess to State
      Lifecycle Hooks
      Majority of projects use class based approach



    Dynamic content
      <h1>Random number is {Math.floor(Math.random() * 30)} !</h1>
        can be outputted in the string
        inline expression
        can call functions that way

      Props
        Properties (short for) - are attributes you add onto a component.
        {props}
          Using functional components
        {this.props}
          When using classed based components

      Children
        Refers to any element between the opening and closing tag of the components.
          instead of: <Person/>
          its this: <Person>I am children</Person>


    State
      Only available in class based components
      Using class based components and state this way is the default way of managing state
      Is just variables, but is managed by the component.

      having state in all your components will make the application unpredictable the larger it grows.
        Other components can change other components state
      state is a reserved word
      state = {}
        is an object

      If state changes, it will cause React to rerender the dom.
      Props also cause the DOM to rerender

      Event handling
        Methods should have the name suffix 'handler' because you are not directly calling it
        https://reactjs.org/docs/events.html#supported-events - Support react events. (SyntheticEvent)

        Don't mutate state directly
        use setState() to change state
          Merges with existing state

    Props
      short for Properties
      props are variables passed to it by its parent component

    State vs Props
      In a React component, props are variables passed to it by its parent component. State on the other hand is still variables, but directly initialized and managed by the component.
      The state can be initialized by props.

      Hooks
        Only work with functional components
        (React 16.8+)

        useEffect()

        useState()
          hook that allows you to manage state in a functional component
          returns a array with exactly 2 elements and always 2 elements
            1st ele = current state
            2nd ele = function that allows you to update state
          Can use array destructuring to get the elements of the useState method
          Does not merge, it replaces the old state.

        Can create custom hooks

      Stateful components - are components that manage state. (app.js in this example)
        Smart components
        Container components
        If every component is managing state you end up with spaghetti code.
        Makes it very hard to do anything, also makes the app unpredictable
      Stateless components - are components that do not manage state. (Person component)
        Or also called presentational components
        stateless, or dumb components

      Have as many stateless, presentational components as possible.
      Use stateful components when you need to manage state.

      Bind syntax is more efficient

      2 Way binding - listening to changes and Update state, props and other changes. ?


  Styling
    2 ways of Styling
      importing css file
      inline-styles - creating a style method in render method components
        style is a object that comes before the return.
        have to use js style css names.
        Will be scoped to the component and cannot leverage full css
          (not sure what features you cannot use)
        the values are strings.
        const style = { font: 'inherit' }
        <button style={style}></button>


  JSX conditionals
    uses ternary operator and boolean in state. Renders on change
      (confusing)
      (Thank goodness theres a alternative to this)
    Can create a if statement and pass the component in the render method.
      (See resources/list-conditionals01/src/App.js:52)
      Preferred way of outputting conditional content

    use map method to render dynamic content.
      common pattern for printing lists from an array.
      {this.state.persons.map(person => { <Person name=person.name/> })}
      should assign a key property.

    Always update state in immutable fashion
      Create a copy
      change that
      then use setState to update with modified copy.

    using .findIndex and .find methods on the this.state.persons array to manipulate it
      (example code is in resources/conditional-content-finished)


  Error handling
    (resources/debugging-01-finished)
    Higher Order Component - Wraps another component such ErrorBoundary component.
      It does something with componentDidCatch if there is an error for example. To prevent the front-end from catching
      React version of try-catch

    Only use ErrorBoundary for code that might fail that you have no control over.
      That way you can show your own custom error message.


  More components
    Assests/ - For holding images
    Containers/ -  Holds containers, such as app.js file and app.test.js file
      manages state and manipuates the state.
    Components/ - Holds components

    clear responsibility components
    narrowly focused
    granular components
    use as many functional components as possible`

    Component Lifecycle * (possible interview question)
      Only for classed-based components
        Component Creation - Rendered for the first time.
          constructor(props)
          have to call super(props)
          basic initialization work - setting initial state
        getDerivedStateFromProps(props,state)
          sync state
        render() - suppose to only render jsx
          render child components
        componentDidMount() - used for getting data from web, cause the application to rerender
          dont call setState synchronously here, unless its after the event of receiving a promise
          rerender cycle is bad for performance
        componentWillMount() - use this for preparing state for props ?
          Will be removed in a future release.

        shouldComponentUpdate(nextProps, nextState) - Used for react to determine if the dom should update
          Usually don't want to make changes to this. It could easily break application.
        getSnapshotBeforeUpdate(prevProps, prevState) - Used for last-minute DOM ops
        componentDidUpdate() - Runs when update is finished.
